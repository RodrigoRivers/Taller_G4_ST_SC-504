----------------------------------------------------------------------------------------------------------------------------
-- Creacion de tablas:
----------------------------------------------------------------------------------------------------------------------------

CREATE TABLE Clientes
(
    cliente_id NUMBER(15),
    cliente_nombre VARCHAR(20),
    cliente_direccion VARCHAR(40),
    cliente_telefono NUMBER(8),
    CONSTRAINT cliente_pk PRIMARY KEY (cliente_id)
);

CREATE TABLE Repuestos
(
    repuesto_id NUMBER(15),
    repuesto_descripcion VARCHAR(30),
    repuesto_marca VARCHAR(25),
    repuesto_cantidad NUMBER(30),
    repuesto_precio NUMBER(20),
    CONSTRAINT repuesto_pk PRIMARY KEY (repuesto_id)
);

CREATE TABLE Maquinas
(
    maquina_id NUMBER(15),
    maquina_descripcion VARCHAR(30),
    maquina_cantidad NUMBER(20),
    CONSTRAINT maquina_pk PRIMARY KEY (maquina_id)
);

CREATE TABLE Herramientas
(
    herramienta_id NUMBER(15),
    herramienta_descripcion VARCHAR(30),
    herramienta_cantidad NUMBER(20),
    CONSTRAINT herramienta_pk PRIMARY KEY (herramienta_id)
);

CREATE TABLE Instrumentos
(
    instrumento_id NUMBER(15),
    instrumento_descripcion VARCHAR(30),
    instrumento_cantidad NUMBER(20),
    CONSTRAINT instrumento_pk PRIMARY KEY (instrumento_id)
);

CREATE TABLE Facturas
(
    factura_id NUMBER(15),
    cliente_id NUMBER(15),
    repuesto_id NUMBER(15),
    factura_monto NUMBER(20),
    factura_fecha VARCHAR(10),
    CONSTRAINT factura_pk PRIMARY KEY (factura_id),
    CONSTRAINT fk_factura_cliente FOREIGN KEY (cliente_id) REFERENCES Clientes(cliente_id),
    CONSTRAINT fk_factura_respuesto FOREIGN KEY (repuesto_id) REFERENCES Repuestos(repuesto_id)
);

CREATE TABLE Mecanicos
(
    mecanico_id NUMBER(15),
    mecanico_nombre VARCHAR(20),
    mecanico_direccion VARCHAR(30),
    mecanico_telefono NUMBER(8),
    CONSTRAINT mecanico_pk PRIMARY KEY (mecanico_id)
);

CREATE TABLE Vehiculos
(
    vehiculo_id NUMBER(15),
    cliente_id NUMBER(15),
    mecanico_id NUMBER(15),
    vehiculo_marca VARCHAR(25),
    vehiculo_modelo VARCHAR(25),
    vehiculo_placa VARCHAR(7),
    CONSTRAINT vehiculo_pk PRIMARY KEY (vehiculo_id),
    CONSTRAINT fk_vehiculo_cliente FOREIGN KEY (cliente_id) REFERENCES Clientes(cliente_id),
    CONSTRAINT fk_vehiculo_mecanico FOREIGN KEY (mecanico_id) REFERENCES Mecanicos(mecanico_id)
);

CREATE TABLE Sucursales
(
    sucursal_id NUMBER(15),
    sucursal_direccion VARCHAR(30),
    sucursal_telefono NUMBER(8),
    CONSTRAINT sucursal_pk PRIMARY KEY (sucursal_id)
);

CREATE TABLE Citas
(
    cita_id NUMBER(15),
    cliente_id NUMBER(15),
    mecanico_id NUMBER(15),
    sucursal_id NUMBER(15),
    cita_descripcion VARCHAR(30),
    cita_fecha VARCHAR(10),
    cita_hora VARCHAR(5),
    CONSTRAINT cita_pk PRIMARY KEY (cita_id),
    CONSTRAINT fk_cita_cliente FOREIGN KEY (cliente_id) REFERENCES Clientes(cliente_id),
    CONSTRAINT fk_cita_mecanico FOREIGN KEY (mecanico_id) REFERENCES Mecanicos(mecanico_id),
    CONSTRAINT fk_cita_sucursal FOREIGN KEY (sucursal_id) REFERENCES Sucursales(sucursal_id)
);

----------------------------------------------------------------------------------------------------------------------------
--- Inserciones:
----------------------------------------------------------------------------------------------------------------------------

INSERT INTO Clientes (cliente_id, cliente_nombre, cliente_direccion, cliente_telefono)
VALUES (1, 'Juan Perez', 'Calle 1, Ciudad', 12345678);

INSERT INTO Repuestos (repuesto_id, repuesto_descripcion, repuesto_marca, repuesto_cantidad, repuesto_precio)
VALUES (1, 'Bateria', 'ACME', 10, 100.00);

INSERT INTO Maquinas (maquina_id, maquina_descripcion, maquina_cantidad)
VALUES (1, 'Torno', 5);

INSERT INTO Herramientas (herramienta_id, herramienta_descripcion, herramienta_cantidad)
VALUES (1, 'Martillo', 20);

INSERT INTO Instrumentos (instrumento_id, instrumento_descripcion, instrumento_cantidad)
VALUES (1, 'Multimetro', 10);

INSERT INTO Facturas (factura_id, cliente_id, repuesto_id, factura_monto, factura_fecha)
VALUES (1, 1, 1, 1000.00, '2023-03-24');

INSERT INTO Mecanicos (mecanico_id, mecanico_nombre, mecanico_direccion, mecanico_telefono)
VALUES (1, 'Pedro Ramirez', 'Calle 2, Ciudad', 87654321);

INSERT INTO Vehiculos (vehiculo_id, cliente_id, mecanico_id, vehiculo_marca, vehiculo_modelo, vehiculo_placa)
VALUES (1, 1, 1, 'Toyota', 'Corolla', 'ABC123');

INSERT INTO Sucursales (sucursal_id, sucursal_direccion, sucursal_telefono)
VALUES (1, 'Calle 3, Ciudad', 24681012);

INSERT INTO Citas (cita_id, cliente_id, mecanico_id, sucursal_id, cita_descripcion, cita_fecha, cita_hora)
VALUES (1, 1, 1, 1, 'Cambio de aceite', '2023-03-25', '10:00');

----------------------------------------------------------------------------------------------------------------------------
--- Funciones:
----------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE FUNCTION CLIENTE_BUSCADOR_F(F_CODIGO IN NUMBER) 
    RETURN VARCHAR2
    IS 
    F_NOMBRE VARCHAR2(20);
BEGIN 
    SELECT cliente_nombre INTO F_NOMBRE
    FROM Clientes
    WHERE cliente_id = F_CODIGO;

    RETURN ('El codigo ' || F_CODIGO || ' pertenece al cliente ' || F_NOMBRE || '.');  
END;

DECLARE 
	MENSAJE VARCHAR2(100); 
BEGIN 
	MENSAJE := CLIENTE_BUSCADOR_F(1); 
	DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION REPUESTO_BUSCADOR_F(F_CODIGO IN NUMBER) 
    RETURN VARCHAR2
    IS 
    F_DESCRIPCION VARCHAR2(30);
BEGIN 
    SELECT repuesto_descripcion INTO F_DESCRIPCION
    FROM Repuestos
    WHERE repuesto_id = F_CODIGO;

    RETURN ('El codigo ' || F_CODIGO || ' pertenece al repuesto ' || F_DESCRIPCION || '.');  
END;

DECLARE 
	MENSAJE VARCHAR2(100); 
BEGIN 
	MENSAJE := REPUESTO_BUSCADOR_F(1); 
	DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION MAQUINA_BUSCADOR_F(F_CODIGO IN NUMBER) 
    RETURN VARCHAR2
    IS 
    F_DESCRIPCION VARCHAR2(30);
BEGIN 
    SELECT maquina_descripcion INTO F_DESCRIPCION
    FROM Maquinas
    WHERE maquina_id = F_CODIGO;

    RETURN ('El codigo ' || F_CODIGO || ' pertenece a la maquina ' || F_DESCRIPCION || '.');  
END;

DECLARE 
	MENSAJE VARCHAR2(100); 
BEGIN 
	MENSAJE := MAQUINA_BUSCADOR_F(1); 
	DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION HERRAMIENTA_BUSCADOR_F(F_CODIGO IN NUMBER) 
    RETURN VARCHAR2
    IS 
    F_DESCRIPCION VARCHAR2(30);
BEGIN 
    SELECT herramienta_descripcion INTO F_DESCRIPCION
    FROM Herramientas
    WHERE herramienta_id = F_CODIGO;

    RETURN ('El codigo ' || F_CODIGO || ' pertenece a la herramienta ' || F_DESCRIPCION || '.');  
END;

DECLARE 
	MENSAJE VARCHAR2(100); 
BEGIN 
	MENSAJE := HERRAMIENTA_BUSCADOR_F(1); 
	DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION INSTRUMENTO_BUSCADOR_F(F_CODIGO IN NUMBER) 
    RETURN VARCHAR2
    IS 
    F_DESCRIPCION VARCHAR2(30);
BEGIN 
    SELECT instrumento_descripcion INTO F_DESCRIPCION
    FROM Instrumentos
    WHERE instrumento_id = F_CODIGO;

    RETURN ('El codigo ' || F_CODIGO || ' pertenece al instrumento ' || F_DESCRIPCION || '.');  
END;

DECLARE 
	MENSAJE VARCHAR2(100); 
BEGIN 
	MENSAJE := INSTRUMENTO_BUSCADOR_F(1); 
	DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION VEHICULO_BUSCADOR_F(F_CODIGO IN NUMBER) 
    RETURN VARCHAR2
    IS 
    F_PLACA VARCHAR2(7);
BEGIN 
    SELECT vehiculo_placa INTO F_PLACA
    FROM Vehiculos
    WHERE vehiculo_id = F_CODIGO;

    RETURN ('El codigo ' || F_CODIGO || ' pertenece al vehiculo con placa ' || F_PLACA || '.');  
END;

DECLARE 
    MENSAJE VARCHAR2(100); 
BEGIN 
    MENSAJE := VEHICULO_BUSCADOR_F(1); 
    DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION SUCURSAL_BUSCADOR_F(F_CODIGO IN NUMBER) 
    RETURN VARCHAR2
    IS 
    F_DIRECCION VARCHAR2(30);
BEGIN 
    SELECT sucursal_direccion INTO F_DIRECCION
    FROM Sucursales
    WHERE sucursal_id = F_CODIGO;

    RETURN ('El codigo ' || F_CODIGO || ' pertenece a la sucursal ubicada en ' || F_DIRECCION || '.');  
END;

DECLARE 
    MENSAJE VARCHAR2(100); 
BEGIN 
    MENSAJE := SUCURSAL_BUSCADOR_F(1); 
    DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION CITA_BUSCADOR_F(F_CODIGO IN NUMBER) 
    RETURN VARCHAR2
    IS 
    F_DESCRIPCION VARCHAR2(30);
BEGIN 
    SELECT cita_descripcion INTO F_DESCRIPCION
    FROM Citas
    WHERE cita_id = F_CODIGO;

    RETURN ('El codigo ' || F_CODIGO || ' corresponde a la cita con la descripcion: ' || F_DESCRIPCION || '.');  
END;

DECLARE 
    MENSAJE VARCHAR2(100); 
BEGIN 
    MENSAJE := CITA_BUSCADOR_F(1); 
    DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION CLIENTE_TOTAL_F
    RETURN VARCHAR2
    IS 
    F_TOTAL NUMBER(20);
BEGIN 
    SELECT COUNT(*) INTO F_TOTAL
    FROM Clientes;

    RETURN ('Existe un total de ' || F_TOTAL || ' cliente/s.');  
END;

DECLARE 
    MENSAJE VARCHAR2(100); 
BEGIN 
    MENSAJE := CLIENTE_TOTAL_F(); 
    DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION REPUESTO_TOTAL_F
    RETURN VARCHAR2
    IS 
    F_TOTAL NUMBER(20);
BEGIN 
    SELECT COUNT(*) INTO F_TOTAL
    FROM Repuestos;

    RETURN ('Existe un total de ' || F_TOTAL || ' repuesto/s.');  
END;

DECLARE 
    MENSAJE VARCHAR2(100); 
BEGIN 
    MENSAJE := REPUESTO_TOTAL_F(); 
    DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION MAQUINA_TOTAL_F
    RETURN VARCHAR2
    IS 
    F_TOTAL NUMBER(20);
BEGIN 
    SELECT COUNT(*) INTO F_TOTAL
    FROM Maquinas;

    RETURN ('Existe un total de ' || F_TOTAL || ' m√°quina/s.');  
END;

DECLARE 
    MENSAJE VARCHAR2(100); 
BEGIN 
    MENSAJE := MAQUINA_TOTAL_F(); 
    DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION HERRAMIENTA_TOTAL_F
    RETURN VARCHAR2
    IS 
    F_TOTAL NUMBER(20);
BEGIN 
    SELECT COUNT(*) INTO F_TOTAL
    FROM Herramientas;

    RETURN ('Existe un total de ' || F_TOTAL || ' herramienta/s.');  
END;

DECLARE 
    MENSAJE VARCHAR2(100); 
BEGIN 
    MENSAJE := HERRAMIENTA_TOTAL_F(); 
    DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION INSTRUMENTO_TOTAL_F
    RETURN VARCHAR2
    IS 
    F_TOTAL NUMBER(20);
BEGIN 
    SELECT COUNT(*) INTO F_TOTAL
    FROM Instrumentos;

    RETURN ('Existe un total de ' || F_TOTAL || ' instrumento/s.');  
END;

DECLARE 
    MENSAJE VARCHAR2(100); 
BEGIN 
    MENSAJE := INSTRUMENTO_TOTAL_F(); 
    DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION FACTURA_TOTAL_F
    RETURN VARCHAR2
    IS 
    F_TOTAL NUMBER(20);
BEGIN 
    SELECT COUNT(*) INTO F_TOTAL
    FROM Facturas;

    RETURN ('Existe un total de ' || F_TOTAL || ' factura/s.');  
END;

DECLARE 
    MENSAJE VARCHAR2(100); 
BEGIN 
    MENSAJE := FACTURA_TOTAL_F(); 
    DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION MECANICO_TOTAL_F
    RETURN VARCHAR2
    IS 
    F_TOTAL NUMBER(20);
BEGIN 
    SELECT COUNT(*) INTO F_TOTAL
    FROM Mecanicos;

    RETURN ('Existe un total de ' || F_TOTAL || ' mec√°nico/s.');  
END;

DECLARE 
    MENSAJE VARCHAR2(100); 
BEGIN 
    MENSAJE := MECANICO_TOTAL_F(); 
    DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION VEHICULO_TOTAL_F
    RETURN VARCHAR2
IS 
    F_TOTAL NUMBER(20);
BEGIN 
    SELECT COUNT(*) INTO F_TOTAL
    FROM Vehiculos;

    RETURN ('Existe un total de ' || F_TOTAL || ' veh√≠culo/s.');  
END;

DECLARE 
    MENSAJE VARCHAR2(100); 
BEGIN 
    MENSAJE := VEHICULO_TOTAL_F(); 
    DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION SUCURSAL_TOTAL_F
    RETURN VARCHAR2
IS 
    F_TOTAL NUMBER(20);
BEGIN 
    SELECT COUNT(*) INTO F_TOTAL
    FROM Sucursales;

    RETURN ('Existe un total de ' || F_TOTAL || ' sucursal/es.');  
END;

DECLARE 
    MENSAJE VARCHAR2(100); 
BEGIN 
    MENSAJE := SUCURSAL_TOTAL_F(); 
    DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

CREATE OR REPLACE FUNCTION CITA_TOTAL_F
    RETURN VARCHAR2
IS 
    F_TOTAL NUMBER(20);
BEGIN 
    SELECT COUNT(*) INTO F_TOTAL
    FROM Citas;

    RETURN ('Existe un total de ' || F_TOTAL || ' cita/s.');  
END;

DECLARE 
    MENSAJE VARCHAR2(100); 
BEGIN 
    MENSAJE := CITA_TOTAL_F(); 
    DBMS_OUTPUT.PUT_LINE(MENSAJE);  
END;

----------------------------------------------------------------------------------------------------------------------------
--- Procedimientos almacenados:
----------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE PROCEDURE agregar_cliente(
    p_id IN NUMBER,
    p_nombre IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_telefono IN NUMBER
)
AS
BEGIN
    INSERT INTO Clientes(cliente_id, cliente_nombre, cliente_direccion, cliente_telefono)
    VALUES (p_id, p_nombre, p_direccion, p_telefono);
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('El cliente ha sido agregado correctamente.');

END;

CREATE OR REPLACE PROCEDURE actualizar_cliente(
    p_id IN NUMBER,
    p_nombre IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_telefono IN NUMBER
)
AS
BEGIN
    UPDATE Clientes
    SET cliente_nombre = p_nombre,
        cliente_direccion = p_direccion,
        cliente_telefono = p_telefono
    WHERE cliente_id = p_id;
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('El cliente ha sido actualizado correctamente.');

END;

CREATE OR REPLACE PROCEDURE eliminar_cliente(
    p_id IN NUMBER
)
AS
BEGIN
    DELETE FROM Clientes
    WHERE cliente_id = p_id;
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('El cliente ha sido eliminado correctamente.');

END;

CREATE OR REPLACE PROCEDURE buscar_repuestos_por_marca(
    p_marca IN VARCHAR2
)
AS
    CURSOR c_repuestos IS
        SELECT *
        FROM Repuestos
        WHERE repuesto_marca = p_marca;
    v_repuesto Repuestos%ROWTYPE;
BEGIN
    DBMS_OUTPUT.PUT_LINE('Lista de repuestos de marca ' || p_marca || ':');
    OPEN c_repuestos;
    LOOP
        FETCH c_repuestos INTO v_repuesto;
        EXIT WHEN c_repuestos%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE(v_repuesto.repuesto_id || ' - ' || v_repuesto.repuesto_descripcion);
    END LOOP;
    CLOSE c_repuestos;
END;

CREATE OR REPLACE PROCEDURE actualizar_precios_repuestos(
    p_incremento IN NUMBER
)
AS
BEGIN
    UPDATE Repuestos
    SET repuesto_precio = repuesto_precio + p_incremento;
    
    COMMIT;
    
    DBMS_OUTPUT.PUT_LINE('Los precios de los repuestos han sido actualizados correctamente.');

END;

CREATE OR REPLACE PROCEDURE cantidad_total_repuestos
AS
    v_cantidad NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_cantidad
    FROM Repuestos;
    
    DBMS_OUTPUT.PUT_LINE('La cantidad total de repuestos es: ' || v_cantidad);
END;

CREATE OR REPLACE PROCEDURE buscar_maquina_por_id(
    p_maquina_id IN NUMBER
)
AS
    v_maquina Maquinas%ROWTYPE;
BEGIN
    SELECT *
    INTO v_maquina
    FROM Maquinas
    WHERE maquina_id = p_maquina_id;
    
    DBMS_OUTPUT.PUT_LINE('La m√°quina con ID ' || p_maquina_id || ' es: ' || v_maquina.maquina_descripcion || ' y hay ' || v_maquina.maquina_cantidad || ' unidades disponibles.');

END;

CREATE OR REPLACE PROCEDURE obtener_descripcion_maquinas
AS
    CURSOR c_maquinas IS SELECT maquina_descripcion FROM Maquinas;
    v_descripcion VARCHAR2(30);
BEGIN
    OPEN c_maquinas;
    LOOP
        FETCH c_maquinas INTO v_descripcion;
        EXIT WHEN c_maquinas%NOTFOUND;
        DBMS_OUTPUT.PUT_LINE('Descripci√≥n: ' || v_descripcion);
    END LOOP;
    CLOSE c_maquinas;
END;

CREATE OR REPLACE PROCEDURE obtener_cantidad_total_maquinas AS
    v_cantidad_total NUMBER;
BEGIN
    SELECT SUM(maquina_cantidad)
    INTO v_cantidad_total
    FROM Maquinas;
    
    DBMS_OUTPUT.PUT_LINE('La cantidad total de m√°quinas registradas es: ' || v_cantidad_total);
END;

CREATE OR REPLACE PROCEDURE buscar_herramienta(
    p_id IN Herramientas.herramienta_id%TYPE,
    p_herramienta OUT Herramientas.herramienta_descripcion%TYPE,
    p_cantidad OUT Herramientas.herramienta_cantidad%TYPE
)
IS
BEGIN
    SELECT herramienta_descripcion, herramienta_cantidad
    INTO p_herramienta, p_cantidad
    FROM Herramientas
    WHERE herramienta_id = p_id;
    
    DBMS_OUTPUT.PUT_LINE('Herramienta encontrada: ' || p_herramienta || ', cantidad: ' || p_cantidad);
END;

CREATE OR REPLACE PROCEDURE incrementar_cantidad_herramienta(
    p_id IN Herramientas.herramienta_id%TYPE,
    p_cantidad IN Herramientas.herramienta_cantidad%TYPE
)
IS
BEGIN
    UPDATE Herramientas
    SET herramienta_cantidad = herramienta_cantidad + p_cantidad
    WHERE herramienta_id = p_id;
    
    DBMS_OUTPUT.PUT_LINE(p_cantidad || ' herramientas han sido agregadas al inventario.');
END;

CREATE OR REPLACE PROCEDURE mostrar_cantidad_total_herramientas
IS
    v_total NUMBER;
BEGIN
    SELECT SUM(herramienta_cantidad)
    INTO v_total
    FROM Herramientas;
    
    DBMS_OUTPUT.PUT_LINE('La cantidad total de herramientas en el inventario es: ' || v_total);

END;

CREATE OR REPLACE PROCEDURE buscar_instrumento_mas_cantidad
IS
    v_instrumento Instrumentos.instrumento_descripcion%TYPE;
    v_cantidad_max Instrumentos.instrumento_cantidad%TYPE;
BEGIN
    SELECT instrumento_descripcion, instrumento_cantidad
    INTO v_instrumento, v_cantidad_max
    FROM Instrumentos
    WHERE instrumento_cantidad = (SELECT MAX(instrumento_cantidad) FROM Instrumentos);
    
    DBMS_OUTPUT.PUT_LINE('El instrumento con mayor cantidad en el inventario es: ' || v_instrumento || ', con una cantidad de ' || v_cantidad_max || ' unidades.');
END;

CREATE OR REPLACE PROCEDURE calcular_cantidad_promedio_instrumentos
IS
    v_cantidad_promedio NUMBER;
BEGIN
    SELECT AVG(instrumento_cantidad)
    INTO v_cantidad_promedio
    FROM Instrumentos;
    
    DBMS_OUTPUT.PUT_LINE('La cantidad promedio de instrumentos en el inventario es: ' || v_cantidad_promedio);
END;

CREATE OR REPLACE PROCEDURE mostrar_id_cantidad_instrumentos
IS
BEGIN
    FOR r IN (SELECT instrumento_id, instrumento_cantidad FROM Instrumentos ORDER BY instrumento_id)
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || r.instrumento_id || ', cantidad: ' || r.instrumento_cantidad);
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE obtener_total_facturas_cliente (
    p_cliente_id IN NUMBER,
    p_total OUT NUMBER
)
AS
BEGIN
    SELECT COUNT(*) INTO p_total
    FROM Facturas
    WHERE cliente_id = p_cliente_id;
END;

CREATE OR REPLACE PROCEDURE mostrar_cantidad_total_facturas
IS
    v_cantidad NUMBER;
    v_monto_total NUMBER;
BEGIN
    SELECT COUNT(*), SUM(factura_monto)
    INTO v_cantidad, v_monto_total
    FROM Facturas;
    
    DBMS_OUTPUT.PUT_LINE('La cantidad total de facturas es: ' || v_cantidad || ', y el monto total de las facturas es: ' || v_monto_total);
END;

CREATE OR REPLACE PROCEDURE mostrar_facturas_por_mes(
    p_mes IN VARCHAR2
)
IS
BEGIN
    FOR factura IN (SELECT factura_id, cliente_id, repuesto_id, factura_monto, factura_fecha FROM Facturas WHERE factura_fecha LIKE '%' || p_mes || '%')
    LOOP
        DBMS_OUTPUT.PUT_LINE('Factura ID: ' || factura.factura_id || ', cliente ID: ' || factura.cliente_id || ', repuesto ID: ' || factura.repuesto_id || ', monto: ' || factura.factura_monto || ', fecha: ' || factura.factura_fecha);
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE buscar_mecanico(
    p_id IN Mecanicos.mecanico_id%TYPE,
    p_nombre OUT Mecanicos.mecanico_nombre%TYPE,
    p_direccion OUT Mecanicos.mecanico_direccion%TYPE,
    p_telefono OUT Mecanicos.mecanico_telefono%TYPE
)
IS
BEGIN
    SELECT mecanico_nombre, mecanico_direccion, mecanico_telefono
    INTO p_nombre, p_direccion, p_telefono
    FROM Mecanicos
    WHERE mecanico_id = p_id;
    
    DBMS_OUTPUT.PUT_LINE('Mec√°nico encontrado: ' || p_nombre || ', direcci√≥n: ' || p_direccion || ', tel√©fono: ' || p_telefono);
END;

CREATE OR REPLACE PROCEDURE listar_mecanicos_alfabetico
IS
BEGIN
    FOR mec IN (SELECT * FROM Mecanicos ORDER BY mecanico_nombre)
    LOOP
        DBMS_OUTPUT.PUT_LINE(mec.mecanico_id || ' - ' || mec.mecanico_nombre || ', ' || mec.mecanico_direccion || ', ' || mec.mecanico_telefono);
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE mostrar_cantidad_total_mecanicos
IS
    v_total NUMBER;
BEGIN
    SELECT COUNT(*)
    INTO v_total
    FROM Mecanicos;
    
    DBMS_OUTPUT.PUT_LINE('El n√∫mero total de mec√°nicos en la tabla es: ' || v_total);
END;

CREATE OR REPLACE PROCEDURE mostrar_vehiculos_cliente(
    p_cliente_id IN Clientes.cliente_id%TYPE
)
IS
BEGIN
    FOR vehiculo IN (
        SELECT vehiculo_marca, vehiculo_modelo, vehiculo_placa
        FROM Vehiculos
        WHERE cliente_id = p_cliente_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE(vehiculo.vehiculo_marca || ' ' || vehiculo.vehiculo_modelo || ', placa ' || vehiculo.vehiculo_placa);
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE mostrar_vehiculos_mecanico(
    p_mecanico_id IN Mecanicos.mecanico_id%TYPE
)
IS
BEGIN
    FOR vehiculo IN (
        SELECT vehiculo_marca, vehiculo_modelo, vehiculo_placa
        FROM Vehiculos
        WHERE mecanico_id = p_mecanico_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE(vehiculo.vehiculo_marca || ' ' || vehiculo.vehiculo_modelo || ', placa ' || vehiculo.vehiculo_placa);
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE mostrar_cantidad_vehiculos_marca
IS
BEGIN
    FOR vehiculo IN (
        SELECT vehiculo_marca, COUNT(*) AS cantidad
        FROM Vehiculos
        GROUP BY vehiculo_marca
    ) LOOP
        DBMS_OUTPUT.PUT_LINE(vehiculo.vehiculo_marca || ': ' || vehiculo.cantidad || ' veh√≠culos');
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE buscar_sucursal_por_id(
    p_id IN Sucursales.sucursal_id%TYPE
)
IS
    v_sucursal Sucursales%ROWTYPE;
BEGIN
    SELECT * INTO v_sucursal FROM Sucursales WHERE sucursal_id = p_id;
    
    DBMS_OUTPUT.PUT_LINE('Informaci√≥n de la sucursal con ID ' || p_id || ':');
    DBMS_OUTPUT.PUT_LINE('Direcci√≥n: ' || v_sucursal.sucursal_direccion);
    DBMS_OUTPUT.PUT_LINE('Tel√©fono: ' || v_sucursal.sucursal_telefono);
END;

CREATE OR REPLACE PROCEDURE listar_sucursales_ordenadas_por_direccion
IS
BEGIN
    FOR sucursal IN (SELECT * FROM Sucursales ORDER BY sucursal_direccion)
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || sucursal.sucursal_id || ', direcci√≥n: ' || sucursal.sucursal_direccion || ', tel√©fono: ' || sucursal.sucursal_telefono);
    END LOOP;
END;

CREATE OR REPLACE PROCEDURE cantidad_sucursales_por_subcadena_direccion(
    p_subcadena IN VARCHAR2
)
IS
    v_cantidad NUMBER(10);
BEGIN
    SELECT COUNT(*) INTO v_cantidad FROM Sucursales WHERE UPPER(sucursal_direccion) LIKE '%' || UPPER(p_subcadena) || '%';
    
    DBMS_OUTPUT.PUT_LINE('Cantidad de sucursales con direcci√≥n que contiene "' || p_subcadena || '": ' || v_cantidad);
END;

CREATE OR REPLACE PROCEDURE mostrar_citas_mecanico(
    p_mecanico_id IN Citas.mecanico_id%TYPE
)
IS
BEGIN
    FOR cita IN (SELECT cita_descripcion, cita_fecha, cita_hora
                 FROM Citas
                 WHERE mecanico_id = p_mecanico_id)
    LOOP
        DBMS_OUTPUT.PUT_LINE('Descripci√≥n: ' || cita.cita_descripcion || ', fecha: ' || cita.cita_fecha || ', hora: ' || cita.cita_hora);
    END LOOP;
END;


CREATE OR REPLACE PROCEDURE obtener_citas_por_cliente (cliente_id IN NUMBER)
IS
    cantidad_citas NUMBER;
BEGIN
    SELECT COUNT(*) INTO cantidad_citas FROM Citas WHERE cliente_id = cliente_id;
    DBMS_OUTPUT.PUT_LINE('El cliente con id ' || cliente_id || ' tiene ' || cantidad_citas || ' citas.');
END;

----------------------------------------------------------------------------------------------------------------------------
--- CRUDs:
----------------------------------------------------------------------------------------------------------------------------

---- Repuestos: ----------

----Insertar procedure -------

CREATE OR REPLACE PROCEDURE INSERTARREPUESTO (
  N_REPUESTO_ID IN NUMBER,
  N_REPUESTO_DESCRIPCION IN VARCHAR2,
  N_REPUESTO_MARCA IN VARCHAR2,
  N_REPUESTO_CANTIDAD IN NUMBER,
  N_REPUESTO_PRECIO IN NUMBER
)
AS
BEGIN
  INSERT INTO REPUESTOS (
    REPUESTO_ID,
    REPUESTO_DESCRIPCION,
    REPUESTO_MARCA,
    REPUESTO_CANTIDAD,
    REPUESTO_PRECIO
  ) VALUES (
    N_REPUESTO_ID,
    N_REPUESTO_DESCRIPCION,
    N_REPUESTO_MARCA,
    N_REPUESTO_CANTIDAD,
    N_REPUESTO_PRECIO
  );
END INSERTARREPUESTO;

SELECT * FROM REPUESTOS;

----- eliminar procedure --------

CREATE OR REPLACE PROCEDURE eliminarRepuesto(
    n_REPUESTO_ID IN NUMBER
)
IS
BEGIN
    DELETE FROM REPUESTOS WHERE REPUESTO_ID = n_REPUESTO_ID;
    DBMS_OUTPUT.PUT_LINE('Registro eliminado exitosamente');
END;

----- actualizar ----------------

CREATE OR REPLACE PROCEDURE actualizarRepuesto(
   n_REPUESTO_ID IN NUMBER,
   n_REPUESTO_DESCRIPCION IN VARCHAR2,
   n_REPUESTO_MARCA IN VARCHAR2,
   n_REPUESTO_CANTIDAD IN NUMBER,
   n_REPUESTO_PRECIO IN NUMBER
)
IS
BEGIN
   UPDATE REPUESTOS
   SET 
      REPUESTO_DESCRIPCION = n_REPUESTO_DESCRIPCION,
      REPUESTO_MARCA = n_REPUESTO_MARCA,
      REPUESTO_CANTIDAD = n_REPUESTO_CANTIDAD,
      REPUESTO_PRECIO = n_REPUESTO_PRECIO
   WHERE
      REPUESTO_ID = n_REPUESTO_ID;
END;

BEGIN
   actualizarRepuesto(2, 'casa', 'Nueva marca', 10, 100);
END;
/

----- SELECT --------------------


---- CRUD PARA Clientes -------

------- INSERT CLIENTES --------
CREATE OR REPLACE PROCEDURE INSERTARCLIENTE (
  N_CLIENTE_ID IN NUMBER,
  N_CLIENTE_NOMBRE IN VARCHAR2,
  N_CLIENTE_DIRECCION IN VARCHAR2,
  N_CLIENTE_TELEFONO IN NUMBER
)
AS
BEGIN
  INSERT INTO CLIENTES (
    CLIENTE_ID,
    CLIENTE_NOMBRE,
    CLIENTE_DIRECCION,
    CLIENTE_TELEFONO
  ) VALUES (
    N_CLIENTE_ID,
    N_CLIENTE_NOMBRE,
    N_CLIENTE_DIRECCION,
    N_CLIENTE_TELEFONO
  );
END INSERTARCLIENTE;

SELECT * FROM CLIENTES;

----- eliminar procedure --------

CREATE OR REPLACE PROCEDURE eliminarCliente(
    N_CLIENTE_ID IN NUMBER
)
IS
BEGIN
    DELETE FROM CLIENTES WHERE CLIENTE_ID = N_CLIENTE_ID;
    DBMS_OUTPUT.PUT_LINE('Registro eliminado exitosamente');
END;

----- actualizar ----------------

CREATE OR REPLACE PROCEDURE actualizarCliente(
   N_CLIENTE_ID IN NUMBER,
  N_CLIENTE_NOMBRE IN VARCHAR2,
  N_CLIENTE_DIRECCION IN VARCHAR2,
  N_CLIENTE_TELEFONO IN NUMBER
)
IS
BEGIN
   UPDATE CLIENTES
   SET 
      CLIENTE_NOMBRE = N_CLIENTE_NOMBRE,
      CLIENTE_DIRECCION = N_CLIENTE_DIRECCION,
      CLIENTE_TELEFONO = N_CLIENTE_TELEFONO
   WHERE
      CLIENTE_ID = N_CLIENTE_ID;
END;

BEGIN
   actualizarCliente();
END;
----- SELECT -----------------------

----  CRUD PARA Maquinas -------

------- INSERT Maquinas --------
CREATE OR REPLACE PROCEDURE INSERTARMAQUINA (
  N_MAQUINA_ID IN NUMBER,
  N_MAQUINA_DESCRIPCION IN VARCHAR2,
  N_MAQUINA_CANTIDAD IN NUMBER
)
AS
BEGIN
  INSERT INTO MAQUINAS (
    MAQUINA_ID,
    MAQUINA_DESCRIPCION,
    MAQUINA_CANTIDAD
  ) VALUES (
    N_MAQUINA_ID,
    N_MAQUINA_DESCRIPCION,
    N_MAQUINA_CANTIDAD
    
  );
END INSERTARMAQUINA;

SELECT * FROM MAQUINAS;

----- eliminar procedure --------

CREATE OR REPLACE PROCEDURE eliminarMaquina(
    N_MAQUINA_ID IN NUMBER
)
IS
BEGIN
    DELETE FROM MAQUINAS WHERE  MAQUINA_ID = N_MAQUINA_ID;
    DBMS_OUTPUT.PUT_LINE('Registro eliminado exitosamente');
END;

----- actualizar ----------------

CREATE OR REPLACE PROCEDURE actualizarMaquina(
  N_MAQUINA_ID IN NUMBER,
  N_MAQUINA_DESCRIPCION IN VARCHAR2,
  N_MAQUINA_CANTIDAD IN NUMBER
)
IS
BEGIN
   UPDATE MAQUINAS
   SET 
      MAQUINA_DESCRIPCION = N_MAQUINA_DESCRIPCION,
      MAQUINA_CANTIDAD = N_MAQUINA_CANTIDAD
   WHERE
      MAQUINA_ID = N_MAQUINA_ID;
END;

BEGIN
   actualizarMaquina();
END;
----- SELECT -----------------------

---- CRUD PARA HERRAMINTAS -------


------- INSERT HERRAMIENTAS --------
CREATE OR REPLACE PROCEDURE INSERTARHERRAMIENTAS  (
  N_HERRAMIENTA_ID IN NUMBER,
  N_HERRAMIENTA_DESCRIPCION IN VARCHAR2,
  N_HERRAMIENTA_CANTIDAD IN NUMBER
)
AS
BEGIN
  INSERT INTO HERRAMIENTAS (
    HERRAMIENTA_ID,
    HERRAMIENTA_DESCRIPCION,
    HERRAMIENTA_CANTIDAD
  ) VALUES (
    N_HERRAMIENTA_ID,
    N_HERRAMIENTA_DESCRIPCION,
    N_HERRAMIENTA_CANTIDAD
    
  );
END;

SELECT * FROM HERRAMIENTAS;

----- eliminar procedure --------

CREATE OR REPLACE PROCEDURE eliminarHerramienta(
    N_HERRAMIENTA_ID IN NUMBER
)
IS
BEGIN
    DELETE FROM HERRAMIENTAS WHERE  HERRAMIENTA_ID = N_HERRAMIENTA_ID;
    DBMS_OUTPUT.PUT_LINE('Registro eliminado exitosamente');
END;
----- actualizar ----------------

CREATE OR REPLACE PROCEDURE actualizarHerramienta(
  N_HERRAMIENTA_ID IN NUMBER,
  N_HERRAMIENTA_DESCRIPCION IN VARCHAR2,
  N_HERRAMIENTA_CANTIDAD IN NUMBER
)
IS
BEGIN
   UPDATE HERRAMIENTAS
   SET 
      HERRAMIENTA_DESCRIPCION = N_HERRAMIENTA_DESCRIPCION,
      HERRAMIENTA_CANTIDAD = N_HERRAMIENTA_CANTIDAD
   WHERE
      HERRAMIENTA_ID = N_HERRAMIENTA_ID;
END;

BEGIN
   actualizarHerramienta();
END;

----- SELECT -----------------------
---- CRUD PARA INSTRUMENTOS ---------

------- INSERT INSTRUMENTOS --------
CREATE OR REPLACE PROCEDURE INSERTARINSTRUMENTOS  (
  N_INSTRUMENTO_ID IN NUMBER,
  N_INSTRUMENTO_DESCRIPCION IN VARCHAR2,
  N_INSTRUMENTO_CANTIDAD IN NUMBER
)
AS
BEGIN
  INSERT INTO INSTRUMENTOS (
    INSTRUMENTO_ID,
    INSTRUMENTO_DESCRIPCION,
    INSTRUMENTO_CANTIDAD
  ) VALUES (
    N_INSTRUMENTO_ID,
    N_INSTRUMENTO_DESCRIPCION,
    N_INSTRUMENTO_CANTIDAD
    
  );
END INSERTARINSTRUMENTOS;

SELECT * FROM INSTRUMENTOS;

----- eliminar procedure --------

CREATE OR REPLACE PROCEDURE eliminarInstrumentos(
    N_INSTRUMENTO_ID IN NUMBER
)
IS
BEGIN
    DELETE FROM INSTRUMENTOS WHERE  INSTRUMENTO_ID = N_INSTRUMENTO_ID;
    DBMS_OUTPUT.PUT_LINE('Registro eliminado exitosamente');
END;

----- actualizar ----------------

CREATE OR REPLACE PROCEDURE actualizarInstrumentos(
  N_INSTRUMENTO_ID IN NUMBER,
  N_INSTRUMENTO_DESCRIPCION IN VARCHAR2,
  N_INSTRUMENTO_CANTIDAD IN NUMBER
)
IS
BEGIN
   UPDATE INSTRUMENTOS
   SET 
      INSTRUMENTO_DESCRIPCION = N_INSTRUMENTO_DESCRIPCION,
      INSTRUMENTO_CANTIDAD = N_INSTRUMENTO_CANTIDAD
   WHERE
      INSTRUMENTO_ID = N_INSTRUMENTO_ID;
END;

BEGIN
   actualizarInstrumentos();
END;
----- SELECT -----------------------

---- Crud facturas ----------

------- INSERT INSTRUMENTOS --------
CREATE OR REPLACE PROCEDURE INSERTARINSTRUMENTOS  (
  N_INSTRUMENTO_ID IN NUMBER,
  N_INSTRUMENTO_DESCRIPCION IN VARCHAR2,
  N_INSTRUMENTO_CANTIDAD IN NUMBER
)
AS
BEGIN
  INSERT INTO INSTRUMENTOS (
    INSTRUMENTO_ID,
    INSTRUMENTO_DESCRIPCION,
    INSTRUMENTO_CANTIDAD
  ) VALUES (
    N_INSTRUMENTO_ID,
    N_INSTRUMENTO_DESCRIPCION,
    N_INSTRUMENTO_CANTIDAD
    
  );
END INSERTARINSTRUMENTOS;

SELECT * FROM INSTRUMENTOS;

----- eliminar procedure --------

CREATE OR REPLACE PROCEDURE eliminarInstrumentos(
    N_INSTRUMENTO_ID IN NUMBER
)
IS
BEGIN
    DELETE FROM INSTRUMENTOS WHERE  INSTRUMENTO_ID = N_INSTRUMENTO_ID;
    DBMS_OUTPUT.PUT_LINE('Registro eliminado exitosamente');
END;

----- actualizar ----------------

CREATE OR REPLACE PROCEDURE actualizarInstrumentos(
  N_INSTRUMENTO_ID IN NUMBER,
  N_INSTRUMENTO_DESCRIPCION IN VARCHAR2,
  N_INSTRUMENTO_CANTIDAD IN NUMBER
)
IS
BEGIN
   UPDATE INSTRUMENTOS
   SET 
      INSTRUMENTO_DESCRIPCION = N_INSTRUMENTO_DESCRIPCION,
      INSTRUMENTO_CANTIDAD = N_INSTRUMENTO_CANTIDAD
   WHERE
      INSTRUMENTO_ID = N_INSTRUMENTO_ID;
END;

BEGIN
   actualizarInstrumentos();
END;
----- SELECT -----------------------

----- CRUD MECANICOS --------

------- INSERT MECANICOS --------
CREATE OR REPLACE PROCEDURE INSERTARMECANICOS  (
  N_MECANICO_ID IN NUMBER,
  N_MECANICO_NOMBRE IN VARCHAR2,
  N_MECANICO_DIRECCION IN VARCHAR2,
  N_MECANICO_TELEFONO IN NUMBER
)
AS
BEGIN
  INSERT INTO MECANICOS (
    MECANICO_ID ,
    MECANICO_NOMBRE,
    MECANICO_DIRECCION,
    MECANICO_TELEFONO
  ) VALUES (
    N_MECANICO_ID,
    N_MECANICO_NOMBRE,
    N_MECANICO_DIRECCION,
    N_MECANICO_TELEFONO
    
  );
END INSERTARMECANICOS;

SELECT * FROM MECANICOS;

----- eliminar procedure --------

CREATE OR REPLACE PROCEDURE eliminarMecanicos(
    N_MECANICO_ID IN NUMBER
)
IS
BEGIN
    DELETE FROM MECANICOS WHERE  MECANICO_ID = N_MECANICO_ID;
    DBMS_OUTPUT.PUT_LINE('Registro eliminado exitosamente');
END;

----- actualizar ----------------

CREATE OR REPLACE PROCEDURE actualizarMecanicos(
  N_MECANICO_ID IN NUMBER,
  N_MECANICO_NOMBRE IN VARCHAR2,
  N_MECANICO_DIRECCION IN VARCHAR2,
  N_MECANICO_TELEFONO IN NUMBER
)
IS
BEGIN
   UPDATE MECANICOS
   SET 
      MECANICO_NOMBRE = N_MECANICO_NOMBRE,
      MECANICO_DIRECCION = N_MECANICO_DIRECCION,
      MECANICO_TELEFONO = N_MECANICO_TELEFONO
   WHERE
      MECANICO_ID = N_MECANICO_ID;
END;

BEGIN
   actualizarMecanicos();
END;
----- SELECT -----------------------

---- CRUD VEHICULOS ---------

------- INSERT VEHICULOS --------
CREATE OR REPLACE PROCEDURE INSERTARVEHICULOS (
  N_VEHICULO_ID IN NUMBER,
  N_CLIENTE_ID IN NUMBER,
  N_MECANICO_ID IN NUMBER,
  N_VEHICULO_MARCA IN VARCHAR2,
  N_VEHICULO_MODELO IN VARCHAR2,
  N_VEHICULO_PLACA IN VARCHAR2
)
AS
BEGIN
  INSERT INTO VEHICULOS (
    VEHICULO_ID ,
    CLIENTE_ID,
    MECANICO_ID,
    VEHICULO_MARCA,
    VEHICULO_MODELO,
    VEHICULO_PLACA
  ) VALUES (
    N_VEHICULO_ID,
    N_CLIENTE_ID,
    N_MECANICO_ID,
    N_VEHICULO_MARCA,
    N_VEHICULO_MODELO,
    N_VEHICULO_PLACA
    
  );
END INSERTARVEHICULOS;

SELECT * FROM VEHICULOS;

----- eliminar procedure --------

CREATE OR REPLACE PROCEDURE eliminarVehiculos(
    N_VEHICULO_ID IN NUMBER
)
IS
BEGIN
    DELETE FROM VEHICULOS WHERE  VEHICULO_ID = N_VEHICULO_ID;
    DBMS_OUTPUT.PUT_LINE('Registro eliminado exitosamente');
END;

----- actualizar ----------------

CREATE OR REPLACE PROCEDURE actualizarVehiculos(
  N_VEHICULO_ID IN NUMBER,
  N_CLIENTE_ID IN NUMBER,
  N_MECANICO_ID IN NUMBER,
  N_VEHICULO_MARCA IN VARCHAR2,
  N_VEHICULO_MODELO IN VARCHAR2,
  N_VEHICULO_PLACA IN VARCHAR2
)
IS
BEGIN
   UPDATE VEHICULOS
   SET 
      CLIENTE_ID = N_CLIENTE_ID,
      MECANICO_ID = N_MECANICO_ID,
      VEHICULO_MARCA = N_VEHICULO_MARCA,
      VEHICULO_MODELO = N_VEHICULO_MODELO,
      VEHICULO_PLACA = N_VEHICULO_PLACA
   WHERE
      VEHICULO_ID = N_VEHICULO_ID;
END;

BEGIN
   actualizarVehiculos();
END;
----- SELECT -----------------------

---- CRUD SUCURSALES ------------

------- INSERT SUCURSALES --------
CREATE OR REPLACE PROCEDURE INSERTARSucursales(
  N_SUCURSAL_ID IN NUMBER,
  N_SUCURSAL_DIRECCION IN VARCHAR2,
  N_SUCURSAL_TELEFONO IN NUMBER
)
AS
BEGIN
  INSERT INTO SUCURSALES (
    SUCURSAL_ID,
    SUCURSAL_DIRECCION,
    SUCURSAL_TELEFONO

  ) VALUES (
    N_SUCURSAL_ID,
    N_SUCURSAL_DIRECCION,
    N_SUCURSAL_TELEFONO
    
  );
END INSERTARSucursales;

SELECT * FROM SUCURSALES;

----- eliminar procedure --------

CREATE OR REPLACE PROCEDURE eliminarSucursales(
    N_SUCURSAL_ID IN NUMBER
)
IS
BEGIN
    DELETE FROM SUCURSALES WHERE  SUCURSAL_ID  =  N_SUCURSAL_ID;
    DBMS_OUTPUT.PUT_LINE('Registro eliminado exitosamente');
END;

----- actualizar ----------------

CREATE OR REPLACE PROCEDURE actualizarSucursales(
  N_SUCURSAL_ID IN NUMBER,
  N_SUCURSAL_DIRECCION IN VARCHAR2,
  N_SUCURSAL_TELEFONO IN NUMBER

)
IS
BEGIN
   UPDATE SUCURSALES
   SET 
      SUCURSAL_DIRECCION = N_SUCURSAL_DIRECCION,
      SUCURSAL_TELEFONO = N_SUCURSAL_TELEFONO
   WHERE
     SUCURSAL_ID = N_SUCURSAL_ID;
END;

BEGIN
   actualizarSucursales();
END;
----- SELECT -----------------------

----- CRUD CITAS -----------------

------- INSERT CITAS --------
CREATE OR REPLACE PROCEDURE INSERTARCITAS(
  N_CITA_ID IN NUMBER,
  N_CLIENTE_ID IN NUMBER,
  N_MECANICO_ID IN NUMBER,
  N_SUCURSAL_ID IN NUMBER,
  N_CITA_DESCRIPCION IN VARCHAR2,
  N_CITA_FECHA IN VARCHAR2,
  N_CITA_HORA IN VARCHAR2
)
AS
BEGIN
  INSERT INTO CITAS (
    CITA_ID,
    CLIENTE_ID,
    MECANICO_ID,
    SUCURSAL_ID,
    CITA_DESCRIPCION,
    CITA_FECHA,
    CITA_HORA 

  ) VALUES (
    N_CITA_ID,
    N_CLIENTE_ID,
    N_MECANICO_ID,
    N_SUCURSAL_ID,
    N_CITA_DESCRIPCION,
    N_CITA_FECHA,
    N_CITA_HORA
    
  );
END INSERTARCITAS;

SELECT * FROM CITAS;

----- eliminar procedure --------

CREATE OR REPLACE PROCEDURE eliminarCitas(
    N_CITA_ID IN NUMBER
)
IS
BEGIN
    DELETE FROM CITAS WHERE  CITA_ID  =  N_CITA_ID;
    DBMS_OUTPUT.PUT_LINE('Registro eliminado exitosamente');
END;
----- actualizar ----------------

CREATE OR REPLACE PROCEDURE actualizarCitas(
  N_CITA_ID IN NUMBER,
  N_CLIENTE_ID IN NUMBER,
  N_MECANICO_ID IN NUMBER,
  N_SUCURSAL_ID IN NUMBER,
  N_CITA_DESCRIPCION IN VARCHAR2,
  N_CITA_FECHA IN VARCHAR2,
  N_CITA_HORA IN VARCHAR2
)
IS
BEGIN
   UPDATE CITAS
   SET 
      CLIENTE_ID = N_CLIENTE_ID,
      MECANICO_ID = N_MECANICO_ID,
      SUCURSAL_ID = N_SUCURSAL_ID,
      CITA_DESCRIPCION = N_CITA_DESCRIPCION,
      CITA_FECHA = N_CITA_FECHA,
      CITA_HORA = N_CITA_HORA
   WHERE
     CITA_ID = N_CITA_ID;
END;

BEGIN
   actualizarCitas();
END;
----- SELECT -----------------------

----------------------------------------------------------------------------------------------------------------------------
--- Vistas:
----------------------------------------------------------------------------------------------------------------------------

-----1--------------
CREATE VIEW sucursales_heredia AS
SELECT *
FROM Sucursales
WHERE sucursal_direccion LIKE '%Heredia%';


-------2-------------
CREATE VIEW vista_vehiculos_toyota AS
SELECT *
FROM Vehiculos
WHERE vehiculo_marca LIKE '%Toyota%';

-----------3---------------
CREATE VIEW MecanicosAE AS
SELECT *
FROM Mecanicos
WHERE mecanico_nombre LIKE '%a%' OR mecanico_nombre LIKE '%e%';


--------------4----------
CREATE VIEW citas_con_reparacion AS
SELECT *
FROM Citas
WHERE cita_descripcion LIKE '%reparacion%';

--------5-------------------
CREATE VIEW Herramientas_Mas_De_6 AS
SELECT herramienta_id, herramienta_descripcion, herramienta_cantidad
FROM Herramientas
WHERE herramienta_cantidad > 6;

------- 6 -----------------
CREATE VIEW repuestos_originales AS
SELECT *
FROM Repuestos
WHERE repuesto_marca LIKE '%toyota%' OR repuesto_marca LIKE '%honda%' OR repuesto_marca LIKE '%bmw%';

------- 7------------------
CREATE VIEW clientes_kolbi AS
SELECT cliente_id, cliente_nombre, cliente_direccion, cliente_telefono
FROM clientes
WHERE cliente_telefono BETWEEN 80000000 AND 89999999 AND cliente_telefono LIKE '8%';


-------8-----------------
CREATE VIEW repuestos_premium AS
SELECT *
FROM Repuestos
WHERE repuesto_precio > 40000;


-------9------------------
CREATE VIEW herramientas_mecanicas AS
SELECT *
FROM Herramientas
WHERE herramienta_descripcion LIKE '%mecanica%';

-------10---------------
CREATE VIEW vehiculos_con_placa_0 AS
SELECT *
FROM Vehiculos
WHERE vehiculo_placa LIKE '0%';

----------------------------------------------------------------------------------------------------------------------------
--- Cursores:
----------------------------------------------------------------------------------------------------------------------------

---Tabla CLIENTES
--- 1)
DECLARE
  CURSOR cur_clientes IS
  SELECT * from Clientes;
BEGIN FOR V_FILA IN cur_clientes LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.cliente_id|| ' ' ||V_FILA.cliente_nombre);
END LOOP;
END;
--- 2)
DECLARE
   CURSOR cur_clientes IS
   SELECT * from Clientes;
BEGIN FOR V_FILA IN cur_clientes LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.cliente_nombre|| ' ' ||V_FILA.cliente_direccion);
END LOOP;
END;
---Tabla REPUESTOS
--- 1)
DECLARE
   CURSOR cur_repuestos IS
   SELECT * from Repuestos;
BEGIN FOR V_FILA IN cur_repuestos LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.repuesto_id|| ' ' ||V_FILA.repuesto_descripcion);
END LOOP;
END;
--- 2)
DECLARE
   CURSOR cur_repuestos IS
   SELECT * from Repuestos;
BEGIN FOR V_FILA IN cur_repuestos LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.repuesto_marca|| ' ' ||V_FILA.repuesto_cantidad);
END LOOP;
END;

---Tabla MAQUINAS
--- 1)
DECLARE
   CURSOR cur_maquinas IS
   SELECT * from Maquinas;
BEGIN FOR V_FILA IN cur_maquinas LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.maquina_id|| ' ' ||V_FILA.maquina_descripcion);
END LOOP;
END;
--- 2)
DECLARE
   CURSOR cur_maquinas IS
   SELECT * from Maquinas;
BEGIN FOR V_FILA IN cur_maquinas LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.maquina_cantidad);
END LOOP;
END;

---Tabla HERRAMIENTAS
--- 1)
DECLARE
   CURSOR cur_herramientas IS
   SELECT * from Herramientas;
BEGIN FOR V_FILA IN cur_herramientas LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.herramienta_id|| ' ' ||V_FILA.herramienta_descripcion);
END LOOP;
END;
--- 2)
DECLARE
   CURSOR cur_herramientas IS
   SELECT * from Herramientas;
BEGIN FOR V_FILA IN cur_herramientas LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.herramienta_cantidad);
END LOOP;
END;

---Tabla INSTRUMENTOS
--- 1)
DECLARE
   CURSOR cur_instrumentos IS
   SELECT * from Instrumentos;
BEGIN FOR V_FILA IN cur_instrumentos LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.instrumento_id|| ' ' ||V_FILA.instrumento_descripcion);
END LOOP;
END;
--- 2)
DECLARE
   CURSOR cur_instrumentos IS
   SELECT * from Instrumentos;
BEGIN FOR V_FILA IN cur_instrumentos LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.instrumento_cantidad);
END LOOP;
END;

---Tabla FACTURAS
--- 1)
DECLARE
   CURSOR cur_facturas IS
   SELECT * from Facturas;
BEGIN FOR V_FILA IN cur_facturas LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.factura_id|| ' ' ||V_FILA.factura_monto);
END LOOP;
END;
--- 2)
DECLARE
   CURSOR cur_facturas IS
   SELECT * from Facturas;
BEGIN FOR V_FILA IN cur_facturas LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.cliente_id || ' ' ||V_FILA.factura_fecha);
END LOOP;
END;

---Tabla MECANICOS
--- 1)
DECLARE
   CURSOR cur_mecanicos IS
   SELECT * from Mecanicos;
BEGIN FOR V_FILA IN cur_mecanicos LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.mecanico_id|| ' ' ||V_FILA.mecanico_nombre);
END LOOP;
END;
--- 2)
DECLARE
   CURSOR cur_mecanicos IS
   SELECT * from Mecanicos;
BEGIN FOR V_FILA IN cur_mecanicos LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.mecanico_direccion|| ' ' ||V_FILA.mecanico_telefono);
END LOOP;
END;

---Tabla VEHICULOS
--- 1)
DECLARE
   CURSOR cur_vehiculos IS
   SELECT * from Vehiculos;
BEGIN FOR V_FILA IN cur_vehiculos LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.vehiculo_id|| ' ' ||V_FILA.vehiculo_marca);
END LOOP;
END;
--- 2)
DECLARE
   CURSOR cur_vehiculos IS
   SELECT * from Vehiculos;
BEGIN FOR V_FILA IN cur_vehiculos LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.vehiculo_placa);
END LOOP;
END;

---Tabla SUCURSALES
--- 1)
DECLARE
   CURSOR cur_sucursales IS
   SELECT * from Sucursales;
BEGIN FOR V_FILA IN cur_sucursales LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.sucursal_id|| ' ' ||V_FILA.sucursal_direccion);
END LOOP;
END;
--- 2)
DECLARE
   CURSOR cur_sucursales IS
   SELECT * from Sucursales;
BEGIN FOR V_FILA IN cur_sucursales LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.sucursal_telefono);
END LOOP;
END;
---Tabla CITAS
--- 1)
DECLARE
   CURSOR cur_citas IS
   SELECT * from Citas;
BEGIN FOR V_FILA IN cur_citas LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.cita_id|| ' ' ||V_FILA.cita_descripcion);
END LOOP;
END;
--- 2)
DECLARE
   CURSOR cur_citas IS
   SELECT * from Citas;
BEGIN FOR V_FILA IN cur_citas LOOP
DBMS_OUTPUT.PUT_LINE(V_FILA.cita_fecha|| ' ' ||V_FILA.cita_hora);
END LOOP;
END;

----------------------------------------------------------------------------------------------------------------------------
--- Triggers:
----------------------------------------------------------------------------------------------------------------------------

CREATE OR REPLACE TRIGGER actualizar_repuestos_cantidad
AFTER INSERT ON Facturas
FOR EACH ROW
BEGIN
  UPDATE Repuestos SET repuesto_cantidad = repuesto_cantidad - :new.factura_monto WHERE repuesto_id = :new.repuesto_id;
END;



CREATE OR REPLACE TRIGGER repuesto_agotado
BEFORE UPDATE ON Repuestos
FOR EACH ROW
BEGIN
  IF :new.repuesto_cantidad <= 0 THEN
    DBMS_OUTPUT.PUT_LINE('El repuesto ' || :new.repuesto_descripcion || ' se ha agotado.');
  END IF;
END;


CREATE OR REPLACE TRIGGER nueva_cita
AFTER INSERT ON Vehiculos
FOR EACH ROW
BEGIN
    INSERT INTO Citas (cita_id, cliente_id, mecanico_id, sucursal_id, cita_descripcion, cita_fecha, cita_hora)
    VALUES (NULL, :new.cliente_id, :new.mecanico_id, 1, 'Revisi√≥n', SYSDATE, TO_CHAR(SYSDATE, 'HH24:MI'));
END;


CREATE OR REPLACE TRIGGER update_maquina_cantidad
AFTER DELETE ON Citas
FOR EACH ROW
BEGIN
    UPDATE Maquinas SET maquina_cantidad = maquina_cantidad + 1
    WHERE maquina_id = :old.cita_id;
END;


CREATE OR REPLACE TRIGGER prevenir_eliminacion_cliente
BEFORE DELETE ON Clientes
FOR EACH ROW
DECLARE
  vehiculos_cliente NUMBER;
BEGIN
  SELECT COUNT(*) INTO vehiculos_cliente FROM Vehiculos WHERE cliente_id = :old.cliente_id;
  IF vehiculos_cliente > 0 THEN
    DBMS_OUTPUT.PUT_LINE( 'No se puede eliminar un cliente que tenga veh√≠culos registrados.');
  END IF;
END;

----------------------------------------------------------------------------------------------------------------------------
--- Paquetes:
----------------------------------------------------------------------------------------------------------------------------

-- Paquete cliente

CREATE OR REPLACE PACKAGE ACCIONES_CLIENTE AS  
    PROCEDURE agregar_cliente(
    p_id IN NUMBER,
    p_nombre IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_telefono IN NUMBER
);  

PROCEDURE actualizar_cliente(
    p_id IN NUMBER,
    p_nombre IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_telefono IN NUMBER
);
END;

CREATE OR REPLACE PACKAGE BODY ACCIONES_CLIENTE AS 
    
PROCEDURE agregar_cliente(
    p_id IN NUMBER,
    p_nombre IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_telefono IN NUMBER)
AS 
BEGIN 
    INSERT INTO clientes VALUES(p_id, p_nombre, p_direccion, p_telefono);
COMMIT;
END;

 PROCEDURE actualizar_cliente(
    p_id IN NUMBER,
    p_nombre IN VARCHAR2,
    p_direccion IN VARCHAR2,
    p_telefono IN NUMBER)
AS
    BEGIN
    
 UPDATE Clientes
    SET cliente_nombre = p_nombre,
        cliente_direccion = p_direccion,
        cliente_telefono = p_telefono
    WHERE cliente_id = p_id;

 COMMIT;
END;

END ACCIONES_CLIENTE;

-- probar ejecucion de paquete para actualizar cliente 
Begin
ACCIONES_CLIENTE.actualizar_cliente(1, 'Esteban Gomez', 'Calle 4, Ciudad', 91023475);
END; 
select * from clientes; 

-- Paquete Mecanicos
CREATE OR REPLACE PACKAGE ACCIONES_MECANICO AS
PROCEDURE buscar_mecanico(
    p_id IN Mecanicos.mecanico_id%TYPE,
    p_nombre OUT Mecanicos.mecanico_nombre%TYPE,
    p_direccion OUT Mecanicos.mecanico_direccion%TYPE,
    p_telefono OUT Mecanicos.mecanico_telefono%TYPE
);
END;

CREATE OR REPLACE PACKAGE BODY ACCIONES_MECANICO AS 
PROCEDURE buscar_mecanico(
    p_id IN Mecanicos.mecanico_id%TYPE,
    p_nombre OUT Mecanicos.mecanico_nombre%TYPE,
    p_direccion OUT Mecanicos.mecanico_direccion%TYPE,
    p_telefono OUT Mecanicos.mecanico_telefono%TYPE
)
    IS
BEGIN
    SELECT mecanico_nombre, mecanico_direccion, mecanico_telefono
    INTO p_nombre, p_direccion, p_telefono
    FROM Mecanicos
    WHERE mecanico_id = p_id;
    DBMS_OUTPUT.PUT_LINE('Mec√°nico encontrado: ' || p_nombre || ', direcci√≥n: ' || p_direccion || ', tel√©fono: ' || p_telefono);
END;
END ACCIONES_MECANICO;

-- Paquete vehiculos 

CREATE OR REPLACE PACKAGE PAC_VEHICULOS AS
PROCEDURE mostrar_vehiculos_cliente(
    p_cliente_id IN Clientes.cliente_id%TYPE
);
END;

CREATE OR REPLACE PACKAGE BODY PAC_VEHICULOS AS 
PROCEDURE mostrar_vehiculos_cliente(
    p_cliente_id IN Clientes.cliente_id%TYPE
)
IS
BEGIN
FOR vehiculo IN (
        SELECT vehiculo_marca, vehiculo_modelo, vehiculo_placa
        FROM Vehiculos
        WHERE cliente_id = p_cliente_id
    ) LOOP
        DBMS_OUTPUT.PUT_LINE(vehiculo.vehiculo_marca || ' ' || vehiculo.vehiculo_modelo || ', placa ' || vehiculo.vehiculo_placa);
    END LOOP;
END;
END PAC_VEHICULOS;


-- Paquete Sucursales
CREATE OR REPLACE PACKAGE PAC_SUCURSALES AS
     PROCEDURE listar_sucursales_ordenadas_por_direccion;

END;
    

CREATE OR REPLACE PACKAGE BODY PAC_SUCURSALES AS 
    PROCEDURE listar_sucursales_ordenadas_por_direccion
IS
BEGIN
FOR sucursal IN (SELECT * FROM Sucursales ORDER BY sucursal_direccion)
    LOOP
        DBMS_OUTPUT.PUT_LINE('ID: ' || sucursal.sucursal_id || ', direcci√≥n: ' || sucursal.sucursal_direccion || ', tel√©fono: ' || sucursal.sucursal_telefono);
    END LOOP;
END;
END PAC_SUCURSALES;

-- Paquete Citas 

CREATE OR REPLACE PACKAGE PAC_CITAS AS
PROCEDURE mostrar_citas_mecanico(
    p_mecanico_id IN Citas.mecanico_id%TYPE
);
END;

CREATE OR REPLACE PACKAGE BODY PAC_CITAS AS 
    PROCEDURE mostrar_citas_mecanico(
    p_mecanico_id IN Citas.mecanico_id%TYPE
)
IS
BEGIN
FOR cita IN (SELECT cita_descripcion, cita_fecha, cita_hora
                 FROM Citas
                 WHERE mecanico_id = p_mecanico_id)
    LOOP
        DBMS_OUTPUT.PUT_LINE('Descripci√≥n: ' || cita.cita_descripcion || ', fecha: ' || cita.cita_fecha || ', hora: ' || cita.cita_hora);
    END LOOP;
END;
END PAC_CITAS; 

